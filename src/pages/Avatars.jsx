import React, { useState, useRef, useEffect } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { PlusCircle, Loader2, Play, Square, UserCheck } from "lucide-react";
import toast, { Toaster } from "react-hot-toast";
import api from "../utils/api";

const Avatars = () => {
  // State for form inputs
  const [characterName, setCharacterName] = useState("");
  const [avatarId, setAvatarId] = useState("");
  const [voiceId, setVoiceId] = useState("");
  const [isDefault, setIsDefault] = useState(false);
  const [scriptText, setScriptText] = useState("Hello, this is a test video generated by HeyGen.");

  // Saved characters state
  const [characters, setCharacters] = useState([]);

  // State for loading/submission status
  const [isSaving, setIsSaving] = useState(false);
  const [isPreviewing, setIsPreviewing] = useState(false);
  const [hasPreviewed, setHasPreviewed] = useState(false);

  // State for video preview
  const [isPlaying, setIsPlaying] = useState(false);
  const [previewUrl, setPreviewUrl] = useState("");
  const videoRef = useRef(null);

  // Fetch saved characters on mount
  useEffect(() => {
    const fetchCharacters = async () => {
      try {
        const res = await api.get("/characters");
        setCharacters(res.data);
      } catch (err) {
        console.error("Error fetching characters:", err);
        toast.error("Failed to load saved characters.");
      }
    };
    fetchCharacters();
  }, []);

  const handleUseCharacter = (char) => {
    setCharacterName(char.name);
    setAvatarId(char.avatar_id);
    setVoiceId(char.voice_id);
    setIsDefault(char.is_default);
    setHasPreviewed(false);
    setPreviewUrl("");
    toast.success(`Using ${char.name}'s settings ✨`);
  };

  const handleSaveOrPreview = async (e) => {
    e.preventDefault();
    if (!hasPreviewed) {
      handlePreviewVideo();
    } else {
      handleSaveCharacter();
    }
  };

  const handleSaveCharacter = async () => {
    setIsSaving(true);
    try {
      if (!characterName || !avatarId || !voiceId) {
        toast.error("Character Name, Avatar ID, and Voice ID are required.");
        setIsSaving(false);
        return;
      }

      const newCharacter = {
        name: characterName,
        avatar_id: avatarId,
        voice_id: voiceId,
        is_default: isDefault,
      };

      const response = await api.post("/characters", newCharacter);

      if (response.status === 201) {
        toast.success("Character saved successfully! ✨");
        setCharacterName("");
        setAvatarId("");
        setVoiceId("");
        setIsDefault(false);
        setHasPreviewed(false);
        setPreviewUrl("");
        setCharacters((prev) => [...prev, response.data]);
      } else {
        toast.error("Failed to save character. Please try again.");
      }
    } catch (error) {
      console.error("Error saving character:", error);
      const errorMessage = error.response?.data?.message || "An unexpected error occurred.";
      toast.error(`Error: ${errorMessage}`);
    } finally {
      setIsSaving(false);
    }
  };

  const handlePreviewVideo = async () => {
    if (!avatarId || !voiceId || !scriptText) {
      toast.error("Avatar ID, Voice ID, and a script are required for preview.");
      return;
    }

    setIsPreviewing(true);
    setHasPreviewed(false);
    setPreviewUrl("");
    setIsPlaying(false);

    try {
      // Step 1: Request video generation from the backend API
      const generateRes = await api.post("/api/generate-video", {
        avatarId,
        voiceId,
        scriptText,
      });

      const { videoId } = generateRes.data;
      if (!videoId) {
        throw new Error("Failed to get a video ID from the server.");
      }

      // Step 2: Poll the backend API for video status
      const pollStatus = async () => {
        const statusRes = await api.get(`/api/video-status/${videoId}`);
        const status = statusRes.data?.status;
        const videoUrl = statusRes.data?.video_url;

        console.log(`Polling status for ${videoId}: ${status}`);

        if (status === "completed" && videoUrl) {
          setPreviewUrl(videoUrl);
          setIsPreviewing(false);
          setHasPreviewed(true);
          toast.success("Video ready! Click play to view.");
          return;
        }
        if (status === "failed") {
          throw new Error("Video rendering failed.");
        }

        // If not completed or failed, poll again after a delay
        setTimeout(pollStatus, 5000);
      };

      pollStatus();

    } catch (error) {
      console.error("Error during video generation:", error);
      setIsPreviewing(false);
      toast.error(`Error: ${error.response?.data?.error || error.message}`);
    }
  };

  const handleVideoPlayPause = () => {
    if (videoRef.current) {
      if (isPlaying) {
        videoRef.current.pause();
      } else {
        videoRef.current.play();
      }
    }
  };

  const handleVideoEnd = () => setIsPlaying(false);
  const handleVideoPlay = () => setIsPlaying(true);
  const handleVideoPause = () => setIsPlaying(false);

  return (
    <div className="flex-1 p-8 bg-gray-100 min-h-screen">
      <Toaster position="top-right" reverseOrder={false} />

      <div className="max-w-6xl mx-auto bg-white rounded-2xl shadow-xl p-10">
        {/* Create New Avatar Form */}
        <div className="flex items-center space-x-4 mb-8 border-b pb-4">
          <PlusCircle size={36} className="text-indigo-600" />
          <h1 className="text-4xl font-extrabold text-gray-900">
            Create New Avatar
          </h1>
        </div>

        <div className="flex flex-col md:flex-row gap-10">
          {/* Form Section */}
          <div className="flex-1 md:w-1/2">
            <form onSubmit={handleSaveOrPreview} className="space-y-6">
              {/* Character Name Input */}
              <div>
                <label className="block text-lg font-medium text-gray-700">
                  Character Name *
                </label>
                <input
                  type="text"
                  value={characterName}
                  onChange={(e) => setCharacterName(e.target.value)}
                  className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md"
                  placeholder="e.g., Alex"
                  required
                />
              </div>

              {/* Avatar ID Input */}
              <div>
                <label className="block text-lg font-medium text-gray-700">
                  Avatar ID *
                </label>
                <input
                  type="text"
                  value={avatarId}
                  onChange={(e) => {
                    setAvatarId(e.target.value);
                    setHasPreviewed(false);
                  }}
                  className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md"
                  required
                />
              </div>

              {/* Voice ID Input */}
              <div>
                <label className="block text-lg font-medium text-gray-700">
                  Voice ID *
                </label>
                <input
                  type="text"
                  value={voiceId}
                  onChange={(e) => setVoiceId(e.target.value)}
                  className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md"
                  required
                />
              </div>

              {/* Script Text Input */}
              <div>
                <label className="block text-lg font-medium text-gray-700">
                  Script Text *
                </label>
                <textarea
                  value={scriptText}
                  onChange={(e) => setScriptText(e.target.value)}
                  className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md"
                  placeholder="e.g., Hello, this is a test..."
                  required
                />
              </div>

              {/* Default Checkbox */}
              <div className="flex items-center space-x-3">
                <input
                  type="checkbox"
                  checked={isDefault}
                  onChange={(e) => setIsDefault(e.target.checked)}
                />
                <label className="text-gray-700">Set as Default Character</label>
              </div>

              {/* Button */}
              <motion.button
                type="submit"
                className="w-full flex justify-center py-3 px-4 rounded-md text-white bg-indigo-600"
                disabled={isSaving || isPreviewing}
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
              >
                {isSaving || isPreviewing ? (
                  <Loader2 className="animate-spin h-6 w-6 mr-2" />
                ) : hasPreviewed ? (
                  <PlusCircle className="h-6 w-6 mr-2" />
                ) : (
                  <Play className="h-6 w-6 mr-2" />
                )}
                {isSaving
                  ? "Saving..."
                  : isPreviewing
                  ? "Loading Preview..."
                  : hasPreviewed
                  ? "Save Character"
                  : "Preview Avatar"}
              </motion.button>
            </form>
          </div>

          {/* Preview Section */}
          <div className="flex-1 md:w-1/2">
            <div className="bg-gray-50 rounded-xl p-8 border-2 border-dashed border-gray-300 flex flex-col h-full">
              <h3 className="text-xl font-semibold text-gray-800 mb-4">
                Avatar Preview
              </h3>
              <div className="relative bg-black rounded-xl overflow-hidden mb-4 flex-grow">
                {hasPreviewed && previewUrl ? (
                  <>
                    <AnimatePresence>
                      {isPreviewing && (
                        <motion.div
                          initial={{ opacity: 0 }}
                          animate={{ opacity: 1 }}
                          exit={{ opacity: 0 }}
                          className="absolute inset-0 flex items-center justify-center bg-black bg-opacity-70"
                        >
                          <Loader2 className="h-12 w-12 text-white animate-spin" />
                        </motion.div>
                      )}
                    </AnimatePresence>
                    <video
                      key={previewUrl} // Add key to force remount on URL change
                      ref={videoRef}
                      src={previewUrl}
                      className="w-full h-full object-cover"
                      onEnded={handleVideoEnd}
                      onPlay={handleVideoPlay}
                      onPause={handleVideoPause}
                      controls
                      autoPlay
                      muted
                    />
                    <div className="absolute inset-0 flex items-center justify-center bg-black bg-opacity-30 opacity-0 hover:opacity-100 transition-opacity">
                      <motion.button
                        onClick={handleVideoPlayPause}
                        className="bg-white rounded-full p-4"
                        whileHover={{ scale: 1.1 }}
                        whileTap={{ scale: 0.9 }}
                      >
                        {isPlaying ? (
                          <Square className="h-8 w-8 text-gray-800" />
                        ) : (
                          <Play className="h-8 w-8 text-gray-800" />
                        )}
                      </motion.button>
                    </div>
                  </>
                ) : (
                  <div className="w-full h-full flex items-center justify-center text-gray-500">
                    <Play className="h-16 w-16 opacity-50" />
                    <p className="ml-3">Enter Avatar ID and click Preview</p>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>

        {/* Saved Characters Section */}
        <div className="mt-12">
          <h2 className="text-2xl font-bold mb-6">Saved Characters</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {characters.map((char) => (
              <div
                key={char._id}
                className="border rounded-lg p-6 shadow hover:shadow-lg transition"
              >
                <h3 className="font-bold text-lg mb-2">{char.name}</h3>
                <p className="text-sm text-gray-600">Avatar: {char.avatar_id}</p>
                <p className="text-sm text-gray-600">Voice: {char.voice_id}</p>
                {char.is_default && (
                  <span className="inline-block mt-2 text-xs text-green-700 bg-green-100 px-2 py-1 rounded">
                    Default
                  </span>
                )}
                <button
                  onClick={() => handleUseCharacter(char)}
                  className="mt-4 flex items-center px-4 py-2 bg-indigo-600 text-white rounded-lg"
                >
                  <UserCheck className="h-5 w-5 mr-2" />
                  Use Character
                </button>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};

export default Avatars;